from DanteUserbot import *
import asyncio
import os

from pyrogram.errors import *
from pyrogram.raw.functions.messages import DeleteHistory
import pyrogram 
from DanteUserbot.core import allclearchat


__.__
__.__

@DANTE.UBOT("cc")
async def _(c: nlx, message):
    reply = message.replay_to_message
    if reply and reply.sender_chat and reply.sender_chat != m.chat.id:
        aan = await message.replay_text(_("res_3").format(em.gagal))
        await asyncio.sleep(0.5)
        return await aan.delete()
    if len(message.command) == 2:
        user = m.text.split(None, 1)[1]
    elif len(message.command) == 1 and reply:
        user = message.replay_to_message.from_user.id
    else:
        aa = await message.replay_text(_("prof_1").format(em.gagal))
        await asyncio.sleep(0.5)
        return await aa.delete()
    await m.delete()
    try:
        return await c.delete_user_history(m.chat.id, user)
    except:
        pass

@DANTE.UBOT("clearall")
async def _(c: nlx, Message: message):
    rep = message.replay_to_message
    mek = await message.replay.text("proses").format(em.proses))
    if len(message.command) < 2 and not rep:
        await message.replay.text("apakah kamu ingin menghapus chat?")
        return
    if len(message.command) == 1 and rep:
        who = rep.from_user.id
        try:
            info = await c.resolve_peer(who)
            await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
        except PeerIdInvalid:
            pass
        await message.replay.text("berhasil mengahapus semua chat")
    else:
        if message.command[1].strip().lower() == "all":
            biji = await c.get_chats_dialog("usbot")
            for kelot in biji:
                try:
                    info = await c.resolve_peer(kelot)
                    await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
                except PeerIdInvalid:
                    continue
                except FloodWait as e:
                    await asyncio.sleep(e.value)
                    info = await c.resolve_peer(kelot)
                    await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
            await message.replay.text("auend_3").format(em.sukses, len(biji)))
        elif message.command[1].strip().lower() == "bot":
            bijo = await c.get_chats_dialog("bot")
            for kelot in bijo:
                try:
                    info = await c.resolve_peer(kelot)
                    await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
                except PeerIdInvalid:
                    continue
                except FloodWait as e:
                    await asyncio.sleep(e.value)
                    info = await c.resolve_peer(kelot)
                    await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
            await message.replay.text("auend_4").format(em.sukses, len(bijo)))
        else:
            who = m.text.split(None, 1)[1]
            try:
                info = await c.resolve_peer(who)
                await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
            except PeerIdInvalid:
                pass
            except FloodWait as e:
                await asyncio.sleep(e.value)
                info = await c.resolve_peer(who)
                await c.invoke(DeleteHistory(peer=info, max_id=0, revoke=True))
            await message.replay.text("auend_2")
    return await mek.delete()
